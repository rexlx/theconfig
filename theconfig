#!/bin/bash

## config script for fedora / redhat.

# turn on / off for debug
#set -x

##  These define paths  ##
##----------------------##
alerts=/home/rxlx/bin/logs
data=/home/rxlx/bin/data
scripts=/home/rxlx/bin/scripts
ssh=/home/rxlx/.ssh
plots=$data/plots
graphs=$plots/graphs


## config log  ##
config_log=$alerts/config.log

ptime () {
  /usr/bin/python3 -c 'import time; print(time.time())'
}

up () {
  /usr/bin/python3 $scripts/uptime.py
}

ipv4 () {
  ip route get 8.8.8.8 | awk '{print $7}' \
  | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

fwl () {
  firewall-cmd --state
}

#get the gateway
gw () {
  ip route get 8.8.8.8 | awk '{print $3}' \
  | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

iface () {
  ip route get 8.8.8.8 | awk '{ print $5 }'
}

#get the selinux status
slnx () {
  sestatus | grep mode | awk '{ print $3 }'
}

## creates a border around a string
border () {
  local str="$*"
  local len=${#str}
  local i
  for (( i = 0; i < len + 4; ++i )); do
    printf '-'
  done
  printf "\n $str \n"
  for (( i = 0; i < len + 4; ++i )); do
    printf '-'
  done
  echo
}


## centers a string and fills whitespace
## NO newlines!
center() {
  termwidth="$(tput cols)"
  padding="$(printf '%0.1s' ={1..500})"
  printf '%*.*s %s %*.*s\n' 0 "$(((termwidth-2-${#1})/2))" \
  "$padding" "$1" 0 "$(((termwidth-1-${#1})/2))" "$padding"
}

## date stamp 11/02/2017 08:07:04 AM
dstamp() {
  date +"%x %r"
}

fstamp () {
  date +"%F_%H-%M"
}

## unique stamp 1509628041
ustamp () {
  date +"%s"
}

## grep for IP addresses: cat SOMEFILE | grip
grip () {
  grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

## returns JUST ip
grip-2 () {
  grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
}

## the address of your DNS
dns () {
  nslookup google.com | head -n1 | grip-2
}

## displays network info
defnet () {
  echo -e "\nAddress:\t$(ipv4)"
  echo -e "Interface:\t$(iface)"
  echo -e "Gateway:\t$(gw)"
}

showport () {
  sudo  firewall-cmd --list-all
}

## if hosts file is present, appends to /etc/hosts

## show computer model
model () {
  sudo dmidecode | grep "Product Name" | tr '\t' '!'
}

## shows what virtualization platform VM is running on
virt () {
  isreal=$(sudo virt-what)
  if $isreal; then
    echo 'not virtualized'
  else
    echo $isreal
  fi
}

# easy list by last modified
rl () {
  ls -lrth
}

clients () {
      netstat -an | grep $(ipv4)
}


tshootnet () {
      echo -e "\n\n\n pinging gateway...\n\n" \
      && ping -c 4 $(gw) \
      || echo -e "\ntshootnet $(date):\nError pinging gateway" | tee -a $config_log
      echo -e "\n\n\n pinging more stuff...\n\n" \
      && ping -c 4 google.com \
      || echo -e "\ntshootnet $(date):\nError pinging google" | tee -a $config_log
      echo -e "\n\ndefault interface\t$(iface)" | tee -a $config_log
      echo -e "\ngateway\t\t\t$(gw)" | tee -a $config_log
      echo -e "\n\ndo your routes look alright?\n" \
      && route -nee \
      || echo -e "\n\n---\n\nan unexpected error has occured\n\n---\n"
}

## log stuff ##

logStamp () {
  center "$(dstamp)" >> $config_log
}

fastlog () {
  sudo /usr/bin/tail -f  /var/log/messages
}

log () {
      journalctl -f
}


# stuff i always install
normalize () {
  sudo dnf -y upgrade || echo -e "\ncouldn't get updates! $(date)" \
  | tee -a $config_log
  sudo dnf install fedora-workstation-repositories -y 2>> $config_log
  $(get) dstat fping vim pciutils net-tools bind-utils \
         mlocate nfs-utils sysstat fio ioping tcpdump \
         wireshark sshpass virt-what iperf3 lm_sensors \
         hddtemp nmap python2-devel python3-devel filezilla \
	 google-chrome-stable arc-theme numix-gtk-theme numix-icon-theme \
	 numix-icon-theme-circle 2>> $config_log
  sudo dnf group install 'Development Tools' -y 2>> $config_log
  /usr/bin/python3 -m pip install --user -r $data/requirements.txt 2>> $config_log
}

# just some python stuff

## must be root
clear-ram () {
  sudo sync; echo 3 > /proc/sys/vm/drop_caches
}

sysinf () {
  /usr/bin/python3 $scripts/sysinf.py
}

get-sysinf () {
  ssh $@ 'python' < $scripts/sysinf.py
}

viconfig () {
  vim ~/bin/theconfig
}

mark-user () {
 PS1="\e[0;31m[\u \W]\$ \e[m"
}

top-mem () {
  ps aux | sort -rnk 4 | head
}

# new cool-guy gnome feature that wastes resources, kill it with 9
kill-tracker () {
  while [ true ]; do
    for i in $(ps -ef | grep tracker | grep -v grep | awk '{ print $2 }'); do
      if [[ $i -gt 0 ]]; then
        sudo kill -9 $i
	now=$(dstamp)
	echo -e "\n$now\tkilled tracker!" >> $config_log
      else
        pass='true'
      fi
    done
    sleep 120
  done
}

show-writes () {
  /usr/bin/python3 $scripts/total_rw.py
}

keep-alive () {
  /usr/bin/python3 $scripts/keep_alive.py
}

convert-size () {
  /usr/bin/python3 $scripts/convert_size.py $@
}

fix-db () {
  mongod_running=$(systemctl show -p SubState --value mongod)
  if [[ $mongod_running == 'running' ]]; then
    echo $(dstamp) >> $config_log
    echo -e "mongod is running!" | tee -a $config_log
  else
    echo $(dstamp) >> $config_log
    echo -e "restarting mongod!" | tee -a $config_log
    sudo systemctl restart mongod
  fi
}

watch-access () {
  sudo  tail -f /var/log/httpd/access_log
}

getip () {
  /usr/bin/python3 $scripts/get_ns.py $@
}

foreach () {
    for i in ./*; do
        echo $i; $@ $i
    done
}

isword () {
  grep $@ /usr/share/dict/words
}

top-ten () {
  ps -eo pcpu,pid,user,args | grep -v "COMMAND" | sort -k1 -r -n | head -10
}

convert-time () {
  /usr/bin/python3 $scripts/convert_unixtime.py $@
}

convert-date () {
      /usr/bin/python3 $scripts/convert-date.py $@
}

add-comma () {
  /usr/bin/python3 -c "import sys;print('{:,}'.format(int(sys.argv[1])))" $@
}

describe () {
  /usr/bin/python3 -c "import sys;import pandas as pd;pd.set_option('display.float_format', lambda x: '%.3f' % x);x = pd.read_csv(sys.argv[1]);print(x.describe())" $@
}

$@
